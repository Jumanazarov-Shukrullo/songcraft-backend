"""Create Order Use Case"""

from decimal import Decimal
from typing import Union

from ...domain.entities.order import Order
from ...domain.value_objects.entity_ids import OrderId, UserId
from ...domain.value_objects.money import Money
from ...domain.enums import OrderStatus, ProductType
from ...domain.repositories.unit_of_work import IUnitOfWork
from ...infrastructure.external_services.payment_service import PaymentService
from ...application.dtos.order_dtos import OrderCreateDTO, OrderResponseDTO


class CreateOrderUseCase:
    """Use case for creating a new order"""
    
    def __init__(self, unit_of_work: IUnitOfWork, payment_service: PaymentService):
        self.unit_of_work = unit_of_work
        self.payment_service = payment_service
    
    async def execute(self, order_data: OrderCreateDTO, user_id: Union[int, UserId]) -> OrderResponseDTO:
        """Execute the create order use case"""
        async with self.unit_of_work:
            # Create money value object (convert cents to decimal dollars)
            money = Money(amount=Decimal(order_data.amount) / 100, currency=order_data.currency)
            
            # Handle user_id - it might already be a UserId object or an integer
            if isinstance(user_id, UserId):
                user_id_obj = user_id
            else:
                user_id_obj = UserId(user_id)
            
            # Handle product_type - DTO converts enum to string, so convert back to enum
            if isinstance(order_data.product_type, ProductType):
                product_type_enum = order_data.product_type
            else:
                product_type_enum = ProductType(order_data.product_type)
            
            # Create order entity (ID will be generated by repository)
            order = Order(
                id=OrderId(1),  # Placeholder ID, will be replaced by repository
                user_id=user_id_obj,
                amount=money,
                product_type=product_type_enum,
                status=OrderStatus.PENDING
            )
            
            # Save to repository
            order_repo = self.unit_of_work.orders
            saved_order = await order_repo.add(order)
                
            await self.unit_of_work.commit()
            
            # Convert to response DTO
            return OrderResponseDTO.from_entity(saved_order) 